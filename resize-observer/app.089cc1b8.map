{"version":3,"sources":["node_modules/@juggle/resize-observer/lib/utils/prettify.js","node_modules/@juggle/resize-observer/lib/utils/scheduler.js","node_modules/@juggle/resize-observer/lib/ResizeObserverBoxOptions.js","node_modules/@juggle/resize-observer/lib/DOMRectReadOnly.js","node_modules/@juggle/resize-observer/lib/utils/element.js","node_modules/@juggle/resize-observer/lib/algorithms/calculateBoxSize.js","node_modules/@juggle/resize-observer/lib/ResizeObservation.js","node_modules/@juggle/resize-observer/lib/ResizeObserverDetail.js","node_modules/@juggle/resize-observer/lib/algorithms/hasActiveObservations.js","node_modules/@juggle/resize-observer/lib/algorithms/hasSkippedObservations.js","node_modules/@juggle/resize-observer/lib/algorithms/deliverResizeLoopError.js","node_modules/@juggle/resize-observer/lib/ResizeObserverEntry.js","node_modules/@juggle/resize-observer/lib/algorithms/calculateDepthForNode.js","node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js","node_modules/@juggle/resize-observer/lib/algorithms/gatherActiveObservationsAtDepth.js","node_modules/@juggle/resize-observer/lib/ResizeObserverController.js","node_modules/@juggle/resize-observer/lib/ResizeObserver.js","src/app.js"],"names":["POLYFILL_CONSOLE_OUTPUT","prettifyConsoleOutput","fn","toString","CATCH_FRAMES","requestAnimationFrame","window","observerConfig","attributes","characterData","childList","subtree","events","rafSlot","Map","resizeObserverSlot","scheduled","dispatchCallbacksOnNextFrame","runSchedule","t","frameCallbacks","resizeObserverCallbacks","forEach","callback","push","clear","Scheduler","constructor","stopped","listener","schedule","run","frames","scheduler","set","elementsHaveResized","start","stop","observe","cb","observer","document","body","addEventListener","MutationObserver","name","disconnect","removeEventListener","rafIdBase","Error","handle","cancelAnimationFrame","delete","ResizeObserverBoxOptions","DOMRectReadOnly","x","y","width","height","Object","top","left","bottom","right","freeze","fromRect","rectangle","isSVG","target","SVGElement","isHidden","getBBox","offsetWidth","offsetHeight","getClientRects","length","cache","scrollRegexp","IE","test","navigator","userAgent","parseDimension","pixel","parseFloat","size","inlineSize","blockSize","zeroBoxes","borderBoxSize","contentBoxSize","scrollBoxSize","devicePixelBorderBoxSize","contentRect","calculateBoxSizes","has","get","cs","getComputedStyle","dpr","devicePixelRatio","svg","removePadding","boxSizing","canScrollVertically","overflowY","canScrollHorizontally","overflowX","paddingTop","paddingRight","paddingBottom","paddingLeft","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","horizontalPadding","verticalPadding","horizontalBorderArea","borderLeftWidth","verticalBorderArea","horizontalScrollbarThickness","clientHeight","verticalScrollbarThickness","clientWidth","widthReduction","heightReduction","contentWidth","contentHeight","borderBoxWidth","borderBoxHeight","boxes","calculateBoxSize","observedBox","BORDER_BOX","SCROLL_BOX","DEVICE_PIXEL_BORDER_BOX","CONTENT_BOX","ResizeObservation","lastReportedSize","isActive","ResizeObserverDetail","resizeObserver","activeTargets","skippedTargets","observationTargets","hasActiveObservations","resizeObservers","some","ro","hasSkippedObservations","msg","deliverResizeLoopError","event","ErrorEvent","message","createEvent","initEvent","dispatchEvent","ResizeObserverEntry","contentSize","scrollSize","calculateDepthForNode","node","Infinity","depth","parent","parentNode","broadcastActiveObservations","shallowestDepth","callbacks","entries","ot","entry","targetDepth","splice","gatherActiveObservationsAtDepth","observerMap","watching","updateCount","n","getObservationIndex","i","process","ResizeObserverController","connect","detail","options","box","unobserve","index","indexOf","ResizeObserver","DPPB","arguments","TypeError","Element","tagName","perfArea","getElementById","perfFragment","createDocumentFragment","perfCount","ticks","parentElement","setAttribute","Math","round","innerText","querySelectorAll","el","innerHTML","trim","createElement","appendChild","toggleAttribute"],"mappings":"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","file":"app.089cc1b8.map","sourceRoot":"..","sourcesContent":["const POLYFILL_CONSOLE_OUTPUT = 'function ResizeObserver () { [polyfill code] }';\nconst prettifyConsoleOutput = (fn) => {\n    fn.toString = function () {\n        return POLYFILL_CONSOLE_OUTPUT;\n    };\n    return fn;\n};\nexport { POLYFILL_CONSOLE_OUTPUT, prettifyConsoleOutput };\n","import { process } from '../ResizeObserverController';\nimport { prettifyConsoleOutput } from './prettify';\nconst CATCH_FRAMES = 60 / 5;\nconst requestAnimationFrame = window.requestAnimationFrame;\nconst observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };\nconst events = [\n    'resize',\n    'load',\n    'transitionend',\n    'animationend',\n    'animationstart',\n    'animationiteration',\n    'keyup',\n    'keydown',\n    'mouseup',\n    'mousedown',\n    'mouseover',\n    'mouseout',\n    'blur',\n    'focus'\n];\nconst rafSlot = new Map();\nconst resizeObserverSlot = new Map();\nlet scheduled;\nconst dispatchCallbacksOnNextFrame = () => {\n    if (scheduled) {\n        return;\n    }\n    scheduled = true;\n    function runSchedule(t) {\n        scheduled = false;\n        const frameCallbacks = [];\n        const resizeObserverCallbacks = [];\n        rafSlot.forEach(callback => frameCallbacks.push(callback));\n        resizeObserverSlot.forEach(callback => resizeObserverCallbacks.push(callback));\n        rafSlot.clear();\n        resizeObserverSlot.clear();\n        try {\n            for (let callback of frameCallbacks) {\n                callback(t);\n            }\n        }\n        finally {\n            for (let callback of resizeObserverCallbacks) {\n                callback(t);\n            }\n        }\n    }\n    ;\n    requestAnimationFrame(runSchedule);\n};\nclass Scheduler {\n    constructor() {\n        this.stopped = true;\n        this.listener = () => this.schedule();\n    }\n    run(frames) {\n        const scheduler = this;\n        resizeObserverSlot.set(this, function ResizeObserver() {\n            let elementsHaveResized = false;\n            try {\n                elementsHaveResized = process();\n            }\n            finally {\n                if (elementsHaveResized) {\n                    scheduler.run(60);\n                }\n                else if (frames) {\n                    scheduler.run(frames - 1);\n                }\n                else {\n                    scheduler.start();\n                }\n            }\n        });\n        dispatchCallbacksOnNextFrame();\n    }\n    schedule() {\n        this.stop();\n        this.run(CATCH_FRAMES);\n    }\n    observe() {\n        const cb = () => this.observer && this.observer.observe(document.body, observerConfig);\n        document.body ? cb() : window.addEventListener('DOMContentLoaded', cb);\n    }\n    start() {\n        if (this.stopped) {\n            this.stopped = false;\n            if ('MutationObserver' in window) {\n                this.observer = new MutationObserver(this.listener);\n                this.observe();\n            }\n            events.forEach(name => window.addEventListener(name, this.listener, true));\n        }\n    }\n    stop() {\n        if (!this.stopped) {\n            this.observer && this.observer.disconnect();\n            events.forEach(name => window.removeEventListener(name, this.listener, true));\n            this.stopped = true;\n        }\n    }\n}\nconst scheduler = new Scheduler();\nlet rafIdBase = 0;\nwindow.requestAnimationFrame = function (callback) {\n    if (typeof callback !== 'function') {\n        throw new Error('requestAnimationFrame expects 1 callback argument of type function.');\n    }\n    const handle = rafIdBase += 1;\n    rafSlot.set(handle, function AnimationFrame(t) { return callback(t); });\n    dispatchCallbacksOnNextFrame();\n    return handle;\n};\nwindow.cancelAnimationFrame = function (handle) {\n    rafSlot.delete(handle);\n};\nprettifyConsoleOutput(window.requestAnimationFrame);\nprettifyConsoleOutput(window.cancelAnimationFrame);\nexport { scheduler };\n","var ResizeObserverBoxOptions;\n(function (ResizeObserverBoxOptions) {\n    ResizeObserverBoxOptions[\"BORDER_BOX\"] = \"border-box\";\n    ResizeObserverBoxOptions[\"CONTENT_BOX\"] = \"content-box\";\n    ResizeObserverBoxOptions[\"SCROLL_BOX\"] = \"scroll-box\";\n    ResizeObserverBoxOptions[\"DEVICE_PIXEL_BORDER_BOX\"] = \"device-pixel-border-box\";\n})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));\nexport { ResizeObserverBoxOptions };\n","class DOMRectReadOnly {\n    constructor(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.top = this.y;\n        this.left = this.x;\n        this.bottom = this.top + this.height;\n        this.right = this.left + this.width;\n        return Object.freeze(this);\n    }\n    static fromRect(rectangle) {\n        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);\n    }\n}\nexport { DOMRectReadOnly };\n","const isSVG = (target) => target instanceof SVGElement && 'getBBox' in target;\nconst isHidden = (target) => {\n    if (isSVG(target)) {\n        const { width, height } = target.getBBox();\n        return !width && !height;\n    }\n    const { offsetWidth, offsetHeight } = target;\n    return !(offsetWidth || offsetHeight || target.getClientRects().length);\n};\nexport { isSVG, isHidden };\n","import { ResizeObserverBoxOptions } from '../ResizeObserverBoxOptions';\nimport { DOMRectReadOnly } from '../DOMRectReadOnly';\nimport { isSVG, isHidden } from '../utils/element';\nconst cache = new Map();\nconst scrollRegexp = /auto|scroll/;\nconst IE = (/msie|trident/i).test(navigator.userAgent);\nconst parseDimension = (pixel) => parseFloat(pixel || '0');\nconst size = (inlineSize = 0, blockSize = 0) => {\n    return Object.freeze({ inlineSize, blockSize });\n};\nconst zeroBoxes = Object.freeze({\n    borderBoxSize: size(),\n    contentBoxSize: size(),\n    scrollBoxSize: size(),\n    devicePixelBorderBoxSize: size(),\n    contentRect: new DOMRectReadOnly(0, 0, 0, 0)\n});\nconst calculateBoxSizes = (target) => {\n    if (cache.has(target)) {\n        return cache.get(target);\n    }\n    if (isHidden(target)) {\n        cache.set(target, zeroBoxes);\n        return zeroBoxes;\n    }\n    const cs = getComputedStyle(target);\n    const dpr = window.devicePixelRatio;\n    const svg = isSVG(target) && target.getBBox();\n    const removePadding = !IE && cs.boxSizing === 'border-box';\n    const canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');\n    const canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');\n    const paddingTop = svg ? 0 : parseDimension(cs.paddingTop);\n    const paddingRight = svg ? 0 : parseDimension(cs.paddingRight);\n    const paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);\n    const paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);\n    const borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);\n    const borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);\n    const borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);\n    const borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);\n    const horizontalPadding = paddingLeft + paddingRight;\n    const verticalPadding = paddingTop + paddingBottom;\n    const horizontalBorderArea = borderLeft + borderRight;\n    const verticalBorderArea = borderTop + borderBottom;\n    const horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;\n    const verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;\n    const widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;\n    const heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;\n    const contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;\n    const contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;\n    const borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;\n    const borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;\n    const boxes = Object.freeze({\n        borderBoxSize: size(borderBoxWidth, borderBoxHeight),\n        contentBoxSize: size(contentWidth, contentHeight),\n        scrollBoxSize: size(contentWidth + horizontalPadding, contentHeight + verticalPadding),\n        devicePixelBorderBoxSize: size(borderBoxWidth * dpr, borderBoxHeight * dpr),\n        contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)\n    });\n    cache.set(target, boxes);\n    return boxes;\n};\nconst calculateBoxSize = (target, observedBox) => {\n    const boxes = calculateBoxSizes(target);\n    switch (observedBox) {\n        case ResizeObserverBoxOptions.BORDER_BOX:\n            return boxes.borderBoxSize;\n        case ResizeObserverBoxOptions.SCROLL_BOX:\n            return boxes.scrollBoxSize;\n        case ResizeObserverBoxOptions.DEVICE_PIXEL_BORDER_BOX:\n            return boxes.devicePixelBorderBoxSize;\n        case ResizeObserverBoxOptions.CONTENT_BOX:\n        default:\n            return boxes.contentBoxSize;\n    }\n};\nexport { calculateBoxSize, calculateBoxSizes, cache };\n","import { ResizeObserverBoxOptions } from './ResizeObserverBoxOptions';\nimport { calculateBoxSize } from './algorithms/calculateBoxSize';\nclass ResizeObservation {\n    constructor(target, observedBox) {\n        this.target = target;\n        this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;\n        this.lastReportedSize = {\n            inlineSize: 0,\n            blockSize: 0\n        };\n    }\n    isActive() {\n        const size = calculateBoxSize(this.target, this.observedBox);\n        return this.lastReportedSize.inlineSize !== size.inlineSize\n            || this.lastReportedSize.blockSize !== size.blockSize;\n    }\n}\nexport { ResizeObservation };\n","class ResizeObserverDetail {\n    constructor(resizeObserver, callback) {\n        this.activeTargets = [];\n        this.skippedTargets = [];\n        this.observationTargets = [];\n        this.observer = resizeObserver;\n        this.callback = callback;\n    }\n}\nexport { ResizeObserverDetail };\n","import { resizeObservers } from '../ResizeObserverController';\nconst hasActiveObservations = () => {\n    return resizeObservers.some((ro) => ro.activeTargets.length > 0);\n};\nexport { hasActiveObservations };\n","import { resizeObservers } from '../ResizeObserverController';\nconst hasSkippedObservations = () => {\n    return resizeObservers.some((ro) => ro.skippedTargets.length > 0);\n};\nexport { hasSkippedObservations };\n","const msg = 'ResizeObserver loop completed with undelivered notifications.';\nconst deliverResizeLoopError = () => {\n    let event;\n    if (typeof ErrorEvent === 'function') {\n        event = new ErrorEvent('error', {\n            message: msg\n        });\n    }\n    else {\n        event = document.createEvent('Event');\n        event.initEvent('error', false, false);\n        event.message = msg;\n    }\n    window.dispatchEvent(event);\n};\nexport { deliverResizeLoopError };\n","import { calculateBoxSizes } from './algorithms/calculateBoxSize';\nclass ResizeObserverEntry {\n    constructor(target) {\n        const boxes = calculateBoxSizes(target);\n        this.target = target;\n        this.contentRect = boxes.contentRect;\n        this.borderBoxSize = boxes.borderBoxSize;\n        this.contentSize = boxes.contentBoxSize;\n        this.scrollSize = boxes.scrollBoxSize;\n        this.devicePixelBorderBoxSize = boxes.devicePixelBorderBoxSize;\n    }\n}\nexport { ResizeObserverEntry };\n","import { isHidden } from '../utils/element';\nconst calculateDepthForNode = (node) => {\n    if (isHidden(node)) {\n        return Infinity;\n    }\n    let depth = 0;\n    let parent = node.parentNode;\n    while (parent) {\n        depth += 1;\n        parent = parent.parentNode;\n    }\n    return depth;\n};\nexport { calculateDepthForNode };\n","import { resizeObservers } from '../ResizeObserverController';\nimport { ResizeObserverEntry } from '../ResizeObserverEntry';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { calculateBoxSize } from './calculateBoxSize';\nconst broadcastActiveObservations = () => {\n    let shallowestDepth = Infinity;\n    const callbacks = [];\n    resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        const entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            const entry = new ResizeObserverEntry(ot.target);\n            const targetDepth = calculateDepthForNode(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() { ro.callback(entries, ro.observer); });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (let callback of callbacks) {\n        callback();\n    }\n    return shallowestDepth;\n};\nexport { broadcastActiveObservations };\n","import { resizeObservers } from '../ResizeObserverController';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { cache as sizeCache } from './calculateBoxSize';\nconst gatherActiveObservationsAtDepth = (depth) => {\n    sizeCache.clear();\n    resizeObservers.forEach(function processObserver(ro) {\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n        ro.skippedTargets.splice(0, ro.skippedTargets.length);\n        ro.observationTargets.forEach(function processTarget(ot) {\n            if (ot.isActive()) {\n                if (calculateDepthForNode(ot.target) > depth) {\n                    ro.activeTargets.push(ot);\n                }\n                else {\n                    ro.skippedTargets.push(ot);\n                }\n            }\n        });\n    });\n};\nexport { gatherActiveObservationsAtDepth };\n","import { scheduler } from './utils/scheduler';\nimport { ResizeObservation } from './ResizeObservation';\nimport { ResizeObserverDetail } from './ResizeObserverDetail';\nimport { hasActiveObservations } from './algorithms/hasActiveObservations';\nimport { hasSkippedObservations } from './algorithms/hasSkippedObservations';\nimport { deliverResizeLoopError } from './algorithms/deliverResizeLoopError';\nimport { broadcastActiveObservations } from './algorithms/broadcastActiveObservations';\nimport { gatherActiveObservationsAtDepth } from './algorithms/gatherActiveObservationsAtDepth';\nconst resizeObservers = [];\nconst observerMap = new Map();\nlet watching = 0;\nconst updateCount = (n) => {\n    !watching && n > 0 && scheduler.start();\n    watching += n;\n    !watching && scheduler.stop();\n};\nconst getObservationIndex = (observationTargets, target) => {\n    for (let i = 0; i < observationTargets.length; i += 1) {\n        if (observationTargets[i].target === target) {\n            return i;\n        }\n    }\n    return -1;\n};\nconst process = () => {\n    let depth = 0;\n    gatherActiveObservationsAtDepth(depth);\n    while (hasActiveObservations()) {\n        depth = broadcastActiveObservations();\n        gatherActiveObservationsAtDepth(depth);\n    }\n    if (hasSkippedObservations()) {\n        deliverResizeLoopError();\n    }\n    return depth > 0;\n};\nclass ResizeObserverController {\n    static connect(resizeObserver, callback) {\n        const detail = new ResizeObserverDetail(resizeObserver, callback);\n        resizeObservers.push(detail);\n        observerMap.set(resizeObserver, detail);\n    }\n    static observe(resizeObserver, target, options) {\n        if (observerMap.has(resizeObserver)) {\n            const detail = observerMap.get(resizeObserver);\n            if (getObservationIndex(detail.observationTargets, target) < 0) {\n                detail.observationTargets.push(new ResizeObservation(target, options && options.box));\n                updateCount(1);\n                scheduler.schedule();\n            }\n        }\n    }\n    static unobserve(resizeObserver, target) {\n        if (observerMap.has(resizeObserver)) {\n            const detail = observerMap.get(resizeObserver);\n            const index = getObservationIndex(detail.observationTargets, target);\n            if (index >= 0) {\n                detail.observationTargets.splice(index, 1);\n                updateCount(-1);\n            }\n        }\n    }\n    static disconnect(resizeObserver) {\n        if (observerMap.has(resizeObserver)) {\n            const detail = observerMap.get(resizeObserver);\n            resizeObservers.splice(resizeObservers.indexOf(detail), 1);\n            observerMap.delete(resizeObserver);\n            updateCount(-detail.observationTargets.length);\n        }\n    }\n}\nexport { ResizeObserverController, resizeObservers, process };\n","import { ResizeObserverController } from './ResizeObserverController';\nimport { ResizeObserverBoxOptions } from './ResizeObserverBoxOptions';\nimport { POLYFILL_CONSOLE_OUTPUT } from './utils/prettify';\nconst DPPB = ResizeObserverBoxOptions.DEVICE_PIXEL_BORDER_BOX;\nclass ResizeObserver {\n    constructor(callback) {\n        if (arguments.length === 0) {\n            throw new TypeError(`Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.`);\n        }\n        if (typeof callback !== 'function') {\n            throw new TypeError(`Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.`);\n        }\n        ResizeObserverController.connect(this, callback);\n    }\n    observe(target, options) {\n        if (arguments.length === 0) {\n            throw new TypeError(`Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.`);\n        }\n        if (target instanceof Element === false) {\n            throw new TypeError(`Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element`);\n        }\n        if (options && options.box === DPPB && target.tagName !== 'CANVAS') {\n            throw new Error(`Can only watch ${options.box} on canvas elements.`);\n        }\n        ResizeObserverController.observe(this, target, options);\n    }\n    unobserve(target) {\n        if (arguments.length === 0) {\n            throw new TypeError(`Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.`);\n        }\n        if (target instanceof Element === false) {\n            throw new TypeError(`Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element`);\n        }\n        ResizeObserverController.unobserve(this, target);\n    }\n    disconnect() {\n        ResizeObserverController.disconnect(this);\n    }\n    static toString() {\n        return POLYFILL_CONSOLE_OUTPUT;\n    }\n}\nexport default ResizeObserver;\nexport { ResizeObserver };\n","import ResizeObserver from '@juggle/resize-observer';\n\nconst perfArea = document.getElementById('performance-example');\nconst perfFragment = document.createDocumentFragment();\nconst perfCount = document.getElementById('performance-count');\nlet ticks = 0;\n\nconst ro = new ResizeObserver(entries => {\n  for (let entry of entries) {\n    if (entry.target.parentElement === perfArea) {\n      ticks += 1;\n      perfCount.innerText = ticks;\n      continue;\n    }\n    const { width, height } = entry.contentRect;\n    entry.target.setAttribute('dimensions', `${Math.round(width)} x ${Math.round(height)}`);\n  };\n});\n\n[...document.querySelectorAll('pre, code')].forEach(el => {\n  el.innerHTML = el.innerHTML.trim();\n});\n\nfor (let i = 0; i < 200; i += 1) {\n  const el = document.createElement('div');\n  el.setAttribute('resize', '');\n  perfFragment.appendChild(el);\n}\n\nperfArea.appendChild(perfFragment);\n\nperfArea.addEventListener('click', function () {\n  this.toggleAttribute('animate');\n});\n\ndocument.getElementById('transition-example').addEventListener('click', function () {\n  this.toggleAttribute('fill');\n});\n\ndocument.getElementById('animation-example').addEventListener('click', function () {\n  this.toggleAttribute('animate');\n});\n\n[...document.querySelectorAll('[resize]')].forEach(el => ro.observe(el));\n"]}